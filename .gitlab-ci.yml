stages:
  - lint
  - test
  - build
  - deploy

variables:
  PYTHON_VERSION: 3.13
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  POETRY_CACHE_DIR: $CI_PROJECT_DIR/.cache/pypoetry
  PRE_COMMIT_HOME: $CI_PROJECT_DIR/.cache/pre-commit

default:
  image: python:$PYTHON_VERSION
  cache:
    paths:
      - .cache/pip
      - .cache/pypoetry
      - .cache/pre-commit

  before_script:
    - python --version ; pip --version
    - pip install --upgrade pip
    - pip install poetry --upgrade
    - poetry install
    - source `poetry env info --path`/bin/activate

pre-commit:
  stage: lint
  script: pre-commit run --all-files

pytest:
  stage: test
  variables:
    TEST_RESULTS_FILE: "test_results.xml"
    TEST_COVERAGE_FILE: "coverage.xml"
  script:
    - pytest --junitxml $TEST_RESULTS_FILE --cov=amcrest_api --cov-report=xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - $TEST_RESULTS_FILE
      - $TEST_COVERAGE_FILE
      - tests/**/*.ambr
    reports:
      junit: $TEST_RESULTS_FILE
      coverage_report:
        coverage_format: cobertura
        path: $TEST_COVERAGE_FILE

cli_test:
  stage: test
  script: python -m amcrest_api --version

build-dist:
  stage: build
  script:
    - poetry build
  artifacts:
    paths:
      - dist/

publish:
  rules:
    - if: $CI_COMMIT_TAG
  stage: deploy
  variables:
    REPO_NAME: testpypi
    REPO_URL: https://test.pypi.org/legacy/
  environment:
    name: "TestPyPI ${CI_COMMIT_TAG}"
    url: https://test.pypi.org/project/amcrest_api/${CI_COMMIT_TAG}
  script:
    - poetry config repositories.${REPO_NAME} $REPO_URL
    - poetry config pypi-token.testpypi $PYPY_TEST_TOKEN
    - poetry publish -r $REPO_NAME

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  stage: deploy
  script:
    - echo "Creating GitLab release"
  release:
    tag_name: $CI_COMMIT_TAG
    name: $CI_COMMIT_TAG
    description: "Release version $CI_COMMIT_TAG"
